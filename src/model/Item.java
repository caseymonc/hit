package model;

import java.io.Serializable;
import java.util.Date;

/** Item
 * A physical instance of a particular Product.
 * An Item corresponds to a physical container
 * with a barcode on it.  For example, a case of 
 * soda might contain 24 cans of Diet Coke.  In
 * this case, the Product is Diet Coke, 12 fl oz, 
 * while each physical can is a distinct Item.
 */

public class Item implements PersistentItem{
	
	/**Unique barcode for this Item.
	 * This barcode is generated by
	 * Inventory Tracker, and is
	 * different from the
	 * manufacturer's barcode.
	 * @Constraint Must be a valid UPC barcode and unique among all Items.
	 */
	private BarCode barCode;
	
	/** The date on which the Item was entered into the system.
	 * @Constraint Must be non-empty. Cannot be in the future or prior to 1/1/2000.*/
	private Date entryDate;
	
	/** The date and time at which the Item was removed from the system.
	 * @Constraint This attribute is defined only if the Item has been removed from storage.
	 * Cannot be in the future or prior to 12 AM on the Item�s Entry Date.*/
	private Date exitDate;
	
	/** The date on which this Item will expire. This is calculated
	 * based on this Item�s Entry Date and the Product�s Shelf Life.
	 * @Constraint This attribute is defined only if the Product�s 
	 * Shelf Life attribute has been specified.*/
	private Date expirationDate;
	
	/** The Product of which this Item is an instance.
	 * @Constraint Must be non-empty*/
	private Product product;
	
	/** Product Container that contains this Item.
	 * @Constraint Empty if the Item has been removed from storage. Non-empty if the Item has
	 * not been removed from storage. (Before it is removed, an Item is 
	 * contained in one Product Container. After it is removed, it is contained in no
	 * Product Containers.)*/
	private ProductContainer container;
	
	/** Constructor - creates a new Item using the following params:
	 * 
	 * @param barCode
	 * @param expirationDate
	 * @param product
	 * @param container
	 * 
	 */
	public Item(BarCode barCode, Date entryDate, Date expirationDate, Product product, 
										ProductContainer container){		
		this.barCode = barCode;
		this.entryDate = entryDate;
		this.expirationDate = expirationDate;
		this.product = product;
		this.container = container;
	}
	
	/**
	 * Move the Item from the current container
	 * to the moveTo container
	 * @param moveTo - the container to move this item to
	 * 
	 * @throws exception if moveTo is not a valid Product Container
	 */
	public void move(ProductContainer moveTo){
		
	}
	
	/** Remove the item from storage
	 *  When an Item is removed,
	 *  1. The Item is removed from its containing Storage Unit.
	 *  2. The Exit Time is stored in the Item.
	 *  3. The Item is retained for historical purposes (i.e., for calculating statistics and reporting).
	 * 
	 * @throws exception if the item has already been removed from a storage unit. 
	 */
	public void remove(){
		
	}
	
	
	public String sqlCreateStatement() {
		String query = "CREATE TABLE items(" +
				"items_id INTEGER PRIMARY KEY AUTOINCREMENT," +
				"barCode TEXT," +
				"entryDate DATETIME," +
				"exitDate DATETIME," +
				"expirationDate DATETIME," +
				"product_id INTEGER" + 
				"parent_id INTEGER" +
				");";
		return query;
	}
	
	/** Checks to see if newDate is a valid entry date
	 * 
	 * @param newDate
	 * @return true if newDate is non‐empty and is not in the future and
	 * is not prior to 1/1/2000. Otherwise, returns false.
	 */
	public boolean canSetEntryDate(Date newDate){
		return true;
	}
	
	/** Sets items entryDate to newDate
	 * 
	 * @param newDate - The new entry date
	 */
	public void setEntryDate(Date newDate){
		entryDate = newDate;
	}
	
	// Getters
	
	/** Get the expriation date of the item
	 * 
	 * @return the expiration date of the item
	 */
	public Date getExpirationDate() {
		return expirationDate;
	}
	
	/** Get the exit date of the item
	 * 
	 * @return the exit date of the item
	 */
	public Date getExitDate() {
		return exitDate;
	}
	
	/** Get the entry date of the item
	 * 
	 * @return the entry date of the item
	 */
	public Date getEntryDate() {
		return entryDate;
	}
	
	/** Get the barCode of the item
	 * 
	 * @return the barCode of the item
	 */
	public BarCode getBarCode() {
		return barCode;
	}

	/** Get the item's product
	 * 
	 * @return the item's product
	 */
	public Product getProduct() {
		return product;
	}

	/** Get the item's container
	 * 
	 * @return the item's container
	 */
	public ProductContainer getContainer() {
		return container;
	}

	
}